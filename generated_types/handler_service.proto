// Definition of gRPC communication between client and server instances exclusively.

syntax = "proto3";
package handler_service;

import "handler_types.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

service HandlerService {
  rpc RegisterToDirectory (RegisterToDirectoryRequest) returns (HandlerStateResponse);
  rpc GetDirectoryStatus (GetDirectoryStatusRequest) returns (GetDirectoryStatusResponse);
  rpc StartHandler (StartHandlerRequest) returns (HandlerStatesMapResponse);
  rpc StopHandler (StopHandlerRequest) returns (HandlerStatesMapResponse);
  rpc ModifyHandler (ModifyHandlerRequest) returns (google.protobuf.Empty);
}

message HandlerStateResponse {
  HandlerStatus state = 1;
  string message = 2;
}

message HandlerStatesMapResponse {
  map<string, HandlerStateResponse> states_map = 1; // key is directory path
}

message RegisterToDirectoryRequest {
  string directory_path = 1;
  string handler_config_path = 2;
}

message GetDirectoryStatusRequest {
  string directory_path = 1;
}

message GetDirectoryStatusResponse {
  map<string, HandlerSummary> directory_states_map = 1; // key is directory path
}

message StartHandlerRequest {
  string directory_path = 1;
}

message StopHandlerRequest {
  string directory_path = 1;
  bool remove = 2;
}

message ModifyHandlerRequest {
  string directory_path = 1;
  google.protobuf.BoolValue is_auto_startup = 2;
  google.protobuf.StringValue modify_description = 3;
}